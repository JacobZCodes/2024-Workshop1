---
format: 
  revealjs:
    embed-resources: true
    theme: ["theme/q-theme.scss"]
    slide-number: c/t
    code-copy: true
    center-title-slide: false
    include-in-header: heading-meta.html
    code-link: true
    code-overflow: wrap
    highlight-style: a11y
    height: 1080
    width: 1920
execute: 
  eval: true
  echo: true
---

<h1> Version Control with git and Github</h1>

<hr>

<h3> Sep Dadsetan, PhD - Executive Director, RWD Analytics at </h3>

<h3> 2024-03-09 </h3>
<br>

<h3> `r fontawesome::fa("linkedin", "black")` &nbsp; [linkedin.com/in/sepdadsetan/](https://www.linkedin.com/in/sepdadsetan/)

![](images/github_hex.png){.absolute top=680 left=1450 width="300"}

![](images/logo-dark.svg){.absolute top=268 left=1250 height="65"}

## Introduction

Overview of today's agenda:

  - Introduction (30 minutes)
  - Assignment 1: Git Basics (45 minutes)
  - Assignment 2: Branching and Merging (45 minutes)
  - Break (15 minutes)
  - Assignment 3: Working with GitHub (1 hour)
  - Assignment 4: Collaborating on GitHub (45 minutes)
  - Closing (10 minutes)


## Section 1: Importance of Version Control

Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. It's a critical practice in software development and has become increasingly important in data science as well. Here's why:

:::{.fragment .fade-in-then-out .absolute top=400}
### 1. Collaboration 
Data science often involves collaboration among multiple team members. Version control systems like Git allow multiple people to work on the same project simultaneously. They can make changes, submit them for review, and merge them into the main project without overwriting each other's work.
:::

:::{.fragment .fade-in-then-out .absolute top=400}
### 2. Reproducibility 
In data science, it's crucial to be able to reproduce results. By keeping track of the exact versions of code, data, and **libraries** used, version control helps ensure that experiments can be replicated precisely. This is vital for both validation of results and for future work that builds on previous findings.
:::

:::{.fragment .fade-in-then-out .absolute top=400}
### 3. Experimentation
Data scientists often need to try out different models, features, or hyperparameters. Version control allows them to create branches where they can experiment without affecting the main project. If an experiment is successful, it can be merged back into the main codebase; if not, it can be discarded without any mess.
:::

:::{.fragment .fade-in-then-out .absolute top=400}
### 4. Accountability
Version control maintains a detailed log of who made what changes and when. This is essential for understanding the evolution of a project and can be crucial for regulatory compliance in some industries.
:::

:::{.fragment .fade-in-then-out .absolute top=400}
### 5. Backup and Recovery
Mistakes happen, and code can be lost or broken. Version control acts as a continuous backup, allowing you to revert to previous versions if something goes wrong. This can save hours or even days of work.
:::

:::{.fragment .fade-in-then-out .absolute top=400}
### 6. Code Quality
Through code reviews and the ability to track changes over time, version control can help maintain and improve the quality of the code. It encourages best practices and helps prevent "code rot" where code becomes unmaintained and outdated.
:::

:::{.fragment .fade-in-then-out .absolute top=400}
### 7. Integration with Other Tools
Version control systems often integrate with other tools used in data science, such as continuous integration systems, project management tools, and code notebooks. This can streamline workflows and make the entire process more efficient.
:::

:::{.fragment .fade-in-then-out .absolute top=400}
### Summary
Version control is not just a tool for software developers. It's an essential part of modern data science, enabling collaboration, reproducibility, experimentation, and much more. By providing a structured way to manage changes, track history, and integrate with other tools, version control systems like Git help data scientists work more efficiently and effectively.
:::

## Section 2: Dive into Git

- Introduction to Git as a distributed version control system
- Basic commands and workflow (add/stage, commit, log)
- Branching and merging in Git
- Demonstration with a simple project

![](https://imgs.xkcd.com/comics/git_2x.png){.absolute top=100 left=1200 width="700" height="900"}

## Git Concepts - Simplified

Imagine you're working on a big puzzle with your friends, and you want to make sure that you can always go back to see how the puzzle looked at different stages. Version control is like taking a picture of the puzzle every time you add a few pieces.

Here's how it works:

:::{.fragment .fade-in-then-out .absolute top=400}
(**Repository**) - Starting the Puzzle: When you first open the puzzle box, that's like starting a new project. In version control, this is called creating a "repository." It's the place where all the pictures of your puzzle will be stored.

![](images/puzzle-box.jpg){height=500 fig-align="center"}
:::

:::{.fragment .fade-in-then-out .absolute top=400}
(**Commits**) - Adding Pieces: Every time you and your friends add some pieces to the puzzle and are happy with how it looks, you take a picture. In version control, this picture is called a "commit." It's a snapshot of how everything looks at that moment.

![](images/puzzle-in-progress.jpg){height=500 fig-align="center"}
:::

:::{.fragment .fade-in-then-out .absolute top=400}
(**Branches**) - Trying New Things: Sometimes, you might want to try putting together a part of the puzzle without messing up what you've already done. You can take the current picture and make a copy to work on. This is called a "branch." If you like what you've done in the branch, you can add it back to the main puzzle. If not, you can just throw that copy away.

![](images/puzzle-branch.jpg){height=500 fig-align="center"}
:::

:::{.fragment .fade-in-then-out .absolute top=400}
(**Collaboration**) - Working with Friends: Version control lets you and your friends work on the puzzle together without getting in each other's way. You can all take turns adding pieces and taking pictures, and if someone makes a mistake, you can always look at the previous pictures to see what went wrong.

![](images/puzzle-in-collab.jpg){height=500 fig-align="center"}
:::

:::{.fragment .fade-in-then-out .absolute top=400}
(**History**) - Going Back in Time: If you ever want to see how the puzzle looked at any earlier stage, you can look at the pictures you've taken along the way. This is the "history" in version control, and it lets you go back in time to see how things have changed.

![](images/puzzle-history.jpg){height=400 fig-align="center"}
:::

:::{.fragment .fade-in-then-out .absolute top=400}
(**Backup**) - Keeping Everything Safe: If something happens to the puzzle, like if your little sibling messes it up, you still have all the pictures you've taken. You can use those pictures to put the puzzle back the way it was.

![](images/puzzle-backup.jpg){height=500 fig-align="center"}
:::

:::{.fragment .fade-in-then-out .absolute top=400}
So, version control is like a magical camera for your projects. It lets you take pictures of what you're working on, try new things without worry, work with friends, and even go back in time if you need to. It's a way to make sure that you can always see how your puzzle—or your project—has grown and changed.
:::

## Basic Git Usage and Concepts - Lesson 1

### Adding and Committing

![](https://marklodato.github.io/visual-git-guide/basic-usage.svg){fig-align="center"}

## Basic Git Usage and Concepts - Lesson 2

### Branching

![](https://marklodato.github.io/visual-git-guide/conventions.svg){fig-align="center"}

## Break (20 min)

- Network
- Discuss
- Refresh

## Working with Github - Lesson 3

- **Explanation and Demonstration**: 
  - What is GitHub?
  - Pushing, Pulling
  - Forks, clones, and pull requests. 
- **Hands-on Practice**:
  - Lesson 3 - add your picture to the yearbook!

## Collaborating on Github

- **Explanation and Demonstration (15 minutes)**:   
  - GitHub issues and project boards. 
- **Hands-on Practice (25 minutes)**: 
  - Create an issue related to your pull request and manage it on a project board.


## Helpful Resources

- [Git Cheatsheet](https://education.github.com/git-cheat-sheet-education.pdf)
- [git - the simple guide](https://rogerdudler.github.io/git-guide/)
- [Happy Git and Github for the useR](https://happygitwithr.com/)
- [A Visual Git Reference](https://marklodato.github.io/visual-git-guide/index-en.html)


## Thank You's

- First of all, everyone for listening and participating
- SoCal RUG and Organizers for having me
- Developers behind these wonderful tools
  - Linus Torvalds, Junio Hamano, et. al. for `Git`
  - The software development community! 

![](https://media0.giphy.com/media/ZfK4cXKJTTay1Ava29/giphy.gif?cid=ecf05e47phg610lp121k3yrti5pg6e21zpfgpy728m9nu5h1&ep=v1_gifs_search&rid=giphy.gif&ct=g){fig-align="center"}



